//> Statements and State assign-expr
"Assign   : Token name, Expr value",
//< Statements and State assign-expr
"Binary   : Expr left, Token oper, Expr right",
//> Functions call-expr
"Call     : Expr callee, Token paren, List<shared_ptr<Expr>> arguments",
//< Functions call-expr
//> Classes get-ast
"Get      : Expr object, Token name",
//< Classes get-ast
"Grouping : Expr expression",
"Literal  : any value",
//> Control Flow logical-ast
"Logical  : Expr left, Token oper, Expr right",
//< Control Flow logical-ast
//> Classes set-ast
"Set      : Expr object, Token name, Expr value",
//< Classes set-ast
//> Inheritance super-expr
"Super    : Token keyword, Token method",
//< Inheritance super-expr
//> Classes this-ast
"This     : Token keyword",
//< Classes this-ast
/* Representing Code call-define-ast < Statements and State var-expr
    "Unary    : Token oper, Expr right"
*/
//> Statements and State var-expr
"Unary    : Token oper, Expr right",
"Variable : Token name"